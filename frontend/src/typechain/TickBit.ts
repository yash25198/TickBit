/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TickBit {
  export type BlockHeaderStruct = {
    merkleRootHash: BytesLike;
    nBits: BytesLike;
    nonce: BytesLike;
    previousBlockHash: BytesLike;
    timestamp: BytesLike;
    version: BytesLike;
  };

  export type BlockHeaderStructOutput = [
    merkleRootHash: string,
    nBits: string,
    nonce: string,
    previousBlockHash: string,
    timestamp: string,
    version: string
  ] & {
    merkleRootHash: string;
    nBits: string;
    nonce: string;
    previousBlockHash: string;
    timestamp: string;
    version: string;
  };
}

export interface TickBitInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Px"
      | "Py"
      | "bet"
      | "blockBets"
      | "blockTimestamps"
      | "convertToBigEndian"
      | "convertToBytes32"
      | "doubleHash"
      | "parseBlockHeader"
      | "pools"
      | "tickSize"
      | "token"
      | "verifiedBlocks"
      | "verifier"
      | "verifyAndSettleBlock"
      | "verifyBlock"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "BetPlaced"): EventFragment;

  encodeFunctionData(functionFragment: "Px", values?: undefined): string;
  encodeFunctionData(functionFragment: "Py", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bet",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockBets",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockTimestamps",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToBigEndian",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToBytes32",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "doubleHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseBlockHeader",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "tickSize", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifiedBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyAndSettleBlock",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyBlock",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "Px", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Py", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blockBets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToBigEndian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doubleHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseBlockHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tickSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifiedBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyAndSettleBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyBlock",
    data: BytesLike
  ): Result;
}

export namespace BetPlacedEvent {
  export type InputTuple = [
    addr: AddressLike,
    blockNumber: BigNumberish,
    timestamps: BigNumberish[],
    amount: BigNumberish
  ];
  export type OutputTuple = [
    addr: string,
    blockNumber: bigint,
    timestamps: bigint[],
    amount: bigint
  ];
  export interface OutputObject {
    addr: string;
    blockNumber: bigint;
    timestamps: bigint[];
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TickBit extends BaseContract {
  connect(runner?: ContractRunner | null): TickBit;
  waitForDeployment(): Promise<this>;

  interface: TickBitInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Px: TypedContractMethod<[], [string], "view">;

  Py: TypedContractMethod<[], [string], "view">;

  bet: TypedContractMethod<
    [timestamps: BigNumberish[], blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  blockBets: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: BigNumberish],
    [[bigint, string] & { bettedAt: bigint; bettor: string }],
    "view"
  >;

  blockTimestamps: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  convertToBigEndian: TypedContractMethod<
    [bytesLE: BytesLike],
    [string],
    "view"
  >;

  convertToBytes32: TypedContractMethod<[data: BytesLike], [string], "view">;

  doubleHash: TypedContractMethod<[data: BytesLike], [string], "view">;

  parseBlockHeader: TypedContractMethod<
    [blockHeader: BytesLike],
    [TickBit.BlockHeaderStructOutput],
    "view"
  >;

  pools: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { acruedAmount: bigint; settledAt: bigint }],
    "view"
  >;

  tickSize: TypedContractMethod<[], [bigint], "view">;

  token: TypedContractMethod<[], [string], "view">;

  verifiedBlocks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, string] & {
        merkleRootHash: string;
        nBits: string;
        nonce: string;
        previousBlockHash: string;
        timestamp: string;
        version: string;
      }
    ],
    "view"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  verifyAndSettleBlock: TypedContractMethod<
    [blockNumber: BigNumberish, blockHeader: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  verifyBlock: TypedContractMethod<
    [blockNumber: BigNumberish, blockHeader: BytesLike, proof: BytesLike],
    [TickBit.BlockHeaderStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(nameOrSignature: "Px"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "Py"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bet"
  ): TypedContractMethod<
    [timestamps: BigNumberish[], blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "blockBets"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: BigNumberish],
    [[bigint, string] & { bettedAt: bigint; bettor: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "blockTimestamps"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "convertToBigEndian"
  ): TypedContractMethod<[bytesLE: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "convertToBytes32"
  ): TypedContractMethod<[data: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "doubleHash"
  ): TypedContractMethod<[data: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "parseBlockHeader"
  ): TypedContractMethod<
    [blockHeader: BytesLike],
    [TickBit.BlockHeaderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "pools"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { acruedAmount: bigint; settledAt: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "tickSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifiedBlocks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, string] & {
        merkleRootHash: string;
        nBits: string;
        nonce: string;
        previousBlockHash: string;
        timestamp: string;
        version: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyAndSettleBlock"
  ): TypedContractMethod<
    [blockNumber: BigNumberish, blockHeader: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyBlock"
  ): TypedContractMethod<
    [blockNumber: BigNumberish, blockHeader: BytesLike, proof: BytesLike],
    [TickBit.BlockHeaderStructOutput],
    "view"
  >;

  getEvent(
    key: "BetPlaced"
  ): TypedContractEvent<
    BetPlacedEvent.InputTuple,
    BetPlacedEvent.OutputTuple,
    BetPlacedEvent.OutputObject
  >;

  filters: {
    "BetPlaced(address,uint256,uint256[],uint256)": TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;
    BetPlaced: TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;
  };
}
