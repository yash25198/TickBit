package main

import (
	"context"
	"crypto/ecdsa"
	"errors"
	"log"
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
)

func deployContract(client *ethclient.Client, privateKey *ecdsa.PrivateKey, bytecode []byte) (common.Address, error) {
	publicKey := privateKey.Public()
	publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
	if !ok {
		return common.Address{}, errors.New("error casting public key to ECDSA")
	}

	fromAddress := crypto.PubkeyToAddress(*publicKeyECDSA)
	nonce, err := client.PendingNonceAt(context.Background(), fromAddress)
	if err != nil {
		return common.Address{}, err
	}

	// gasPrice, err := client.SuggestGasPrice(context.Background())
	// if err != nil {
	// 	return common.Address{}, err
	// }

	tx := types.NewContractCreation(nonce, big.NewInt(0), 0, big.NewInt(0), bytecode)
	signedTx, err := types.SignTx(tx, types.NewEIP155Signer(big.NewInt(1)), privateKey)
	if err != nil {
		return common.Address{}, err
	}

	err = client.SendTransaction(context.Background(), signedTx)
	if err != nil {
		return common.Address{}, err
	}

	receipt, err := bind.WaitMined(context.Background(), client, signedTx)
	if err != nil {
		return common.Address{}, err
	}

	return receipt.ContractAddress, nil
}

func main() {
	client, err := ethclient.Dial("https://alfajores-forno.celo-testnet.org")
	if err != nil {
		log.Fatal(err)
	}

	privateKey, err := crypto.HexToECDSA("121f93620a54184f09920c4f71a366f347075b40e6dfa22724cbf18c0af93005")
	if err != nil {
		log.Fatal(err)
	}

	bytecode := common.FromHex("0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063814856f41161005b578063814856f4146100f85780638c95ff1e1461010b5780638da5cb5b1461011e578063f2fde38b1461013957600080fd5b806341493c601461008257806351c7094f14610097578063715018a6146100f0575b600080fd5b6100956100903660046105b5565b61014c565b005b6100cc6100a536600461062f565b6001602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b0390931683529015156020830152015b60405180910390f35b61009561027c565b61009561010636600461062f565b610290565b610095610119366004610660565b610373565b6000546040516001600160a01b0390911681526020016100e7565b610095610147366004610660565b6104b1565b600061015b6004828486610689565b610164916106b3565b6001600160e01b031981166000908152600160209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910460ff16151591830191909152919250906101dd576040516379043bbf60e11b81526001600160e01b0319831660048201526024015b60405180910390fd5b80602001511561020c5760405163ebf1082360e01b81526001600160e01b0319831660048201526024016101d4565b805160405163020a49e360e51b81526001600160a01b03909116906341493c6090610243908a908a908a908a908a9060040161070c565b60006040518083038186803b15801561025b57600080fd5b505afa15801561026f573d6000803e3d6000fd5b5050505050505050505050565b6102846104ef565b61028e600061051c565b565b6102986104ef565b6001600160e01b03198116600090815260016020526040902080546001600160a01b03166102e5576040516379043bbf60e11b81526001600160e01b0319831660048201526024016101d4565b8054600160a01b900460ff161561031b5760405163ebf1082360e01b81526001600160e01b0319831660048201526024016101d4565b805460ff60a01b198116600160a01b1782556040517f63ad2363b183cb8bb562b9590c5b4428e2a566260df053db156576d3d171438d916103679185916001600160a01b031690610745565b60405180910390a15050565b61037b6104ef565b6000816001600160a01b0316632a5104366040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103df9190610768565b90506001600160e01b03198116610409576040516320acd28b60e01b815260040160405180910390fd5b6001600160e01b03198116600090815260016020526040902080546001600160a01b031615610459578054604051632b87e79760e01b81526001600160a01b0390911660048201526024016101d4565b80546001600160a01b0319166001600160a01b0384161781556040517fcb5cc54fa0fda41744197b286ab4135aec7c322cace32c4f55da723d2eb8eee6906104a49084908690610745565b60405180910390a1505050565b6104b96104ef565b6001600160a01b0381166104e357604051631e4fbdf760e01b8152600060048201526024016101d4565b6104ec8161051c565b50565b6000546001600160a01b0316331461028e5760405163118cdaa760e01b81523360048201526024016101d4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008083601f84011261057e57600080fd5b50813567ffffffffffffffff81111561059657600080fd5b6020830191508360208285010111156105ae57600080fd5b9250929050565b6000806000806000606086880312156105cd57600080fd5b85359450602086013567ffffffffffffffff808211156105ec57600080fd5b6105f889838a0161056c565b9096509450604088013591508082111561061157600080fd5b5061061e8882890161056c565b969995985093965092949392505050565b60006020828403121561064157600080fd5b81356001600160e01b03198116811461065957600080fd5b9392505050565b60006020828403121561067257600080fd5b81356001600160a01b038116811461065957600080fd5b6000808585111561069957600080fd5b838611156106a657600080fd5b5050820193919092039150565b6001600160e01b031981358181169160048510156106db5780818660040360031b1b83161692505b505092915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8581526060602082015260006107266060830186886106e3565b82810360408401526107398185876106e3565b98975050505050505050565b6001600160e01b03199290921682526001600160a01b0316602082015260400190565b60006020828403121561077a57600080fd5b505191905056fea2646970667358221220ba05e59d06bb36b3fa65e279ccd36d8ea59acfc4519f93e31be816aa802a212164736f6c63430008140033")

	contractAddress, err := deployContract(client, privateKey, bytecode)
	if err != nil {
		log.Fatal(err)
	}

	log.Printf("Contract deployed at: %s", contractAddress.Hex())
}
